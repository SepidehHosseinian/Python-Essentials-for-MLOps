# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class DatasetRegistryDto(Model):
    """DatasetRegistryDto.

    :param id:
    :type id: str
    :param slug:
    :type slug: str
    :param name:
    :type name: str
    :param description:
    :type description: str
    :param registry_source_relative_path:
    :type registry_source_relative_path: str
    :param blob_location:
    :type blob_location: ~_restclient.models.AzureBlobStorage
    :param filters:
    :type filters: list[~_restclient.models.OpenDatasetFilter]
    :param partition_pattern:
    :type partition_pattern: str
    :param datetime_field:
    :type datetime_field: str
    :param swagger_url:
    :type swagger_url: str
    :param icon_url:
    :type icon_url: str
    :param named_taxonomies:
    :type named_taxonomies: dict[str, list[object]]
    :param tags:
    :type tags: list[str]
    :param profile_interval_in_seconds:
    :type profile_interval_in_seconds: long
    :param bootstrap_time_utc:
    :type bootstrap_time_utc: datetime
    :param triaged:
    :type triaged: bool
    :param data_access:
    :type data_access: ~_restclient.models.DataAccessInfo
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'registry_source_relative_path': {'key': 'registrySourceRelativePath', 'type': 'str'},
        'blob_location': {'key': 'blobLocation', 'type': 'AzureBlobStorage'},
        'filters': {'key': 'filters', 'type': '[OpenDatasetFilter]'},
        'partition_pattern': {'key': 'partitionPattern', 'type': 'str'},
        'datetime_field': {'key': 'datetimeField', 'type': 'str'},
        'swagger_url': {'key': 'swaggerUrl', 'type': 'str'},
        'icon_url': {'key': 'iconUrl', 'type': 'str'},
        'named_taxonomies': {'key': 'namedTaxonomies', 'type': '{[object]}'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'profile_interval_in_seconds': {'key': 'profileIntervalInSeconds', 'type': 'long'},
        'bootstrap_time_utc': {'key': 'bootstrapTimeUtc', 'type': 'iso-8601'},
        'triaged': {'key': 'triaged', 'type': 'bool'},
        'data_access': {'key': 'dataAccess', 'type': 'DataAccessInfo'},
    }

    def __init__(self, id=None, slug=None, name=None, description=None, registry_source_relative_path=None, blob_location=None, filters=None, partition_pattern=None, datetime_field=None, swagger_url=None, icon_url=None, named_taxonomies=None, tags=None, profile_interval_in_seconds=None, bootstrap_time_utc=None, triaged=None, data_access=None):
        super(DatasetRegistryDto, self).__init__()
        self.id = id
        self.slug = slug
        self.name = name
        self.description = description
        self.registry_source_relative_path = registry_source_relative_path
        self.blob_location = blob_location
        self.filters = filters
        self.partition_pattern = partition_pattern
        self.datetime_field = datetime_field
        self.swagger_url = swagger_url
        self.icon_url = icon_url
        self.named_taxonomies = named_taxonomies
        self.tags = tags
        self.profile_interval_in_seconds = profile_interval_in_seconds
        self.bootstrap_time_utc = bootstrap_time_utc
        self.triaged = triaged
        self.data_access = data_access
