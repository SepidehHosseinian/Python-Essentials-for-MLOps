# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class OutputOptions(Model):
    """Additional options that control how the data should be uploaded.

    :param path_on_compute: Which local path on compute the data should be
     uploaded from. This is only applicable to the
     mount and upload mechanisms.
    :type path_on_compute: str
    :param registration_options: If present, whether to register the output as
     a named dataset.
    :type registration_options: ~_restclient.models.RegistrationOptions
    :param upload_options: Options that is specific to upload. This should
     only be set if the mechanism is set to upload.
    :type upload_options: ~_restclient.models.UploadOptions
    :param mount_options: Options that are only used in runtime and execution
     service doesn't need to understand it, just pass it through to jobs.
     Supported option:
     "DisableMetadataCache", value could be "True" or "False". Disable metadata
     cache for output mount.
     "True": Listing folder will always request remote storage. Job will be
     able to see files generated by other nodes after they are uploaded. It can
     impact performance of listing folder.
     "False": Folder/file attributes will be cached in local node. Jobs will
     not be able to see files generated by other nodes during job is running.
     This is the default behavior.
     TODO: add a link to the document about the available options.
     https://msdata.visualstudio.com/Vienna/_workitems/edit/1146933
    :type mount_options: dict[str, str]
    """

    _attribute_map = {
        'path_on_compute': {'key': 'pathOnCompute', 'type': 'str'},
        'registration_options': {'key': 'registrationOptions', 'type': 'RegistrationOptions'},
        'upload_options': {'key': 'uploadOptions', 'type': 'UploadOptions'},
        'mount_options': {'key': 'mountOptions', 'type': '{str}'},
    }

    def __init__(self, path_on_compute=None, registration_options=None, upload_options=None, mount_options=None):
        super(OutputOptions, self).__init__()
        self.path_on_compute = path_on_compute
        self.registration_options = registration_options
        self.upload_options = upload_options
        self.mount_options = mount_options
