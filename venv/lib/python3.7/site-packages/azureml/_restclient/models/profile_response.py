# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ProfileResponse(Model):
    """The profile response.

    :param name: The profile name.
    :type name: str
    :param description: The profile description.
    :type description: str
    :param image_id: The Image Id.
    :type image_id: str
    :param input_data: The input data.
    :type input_data: str
    :param state: The state of the profile.
    :type state: str
    :param created_time: The profile creation time (UTC).
    :type created_time: datetime
    :param kv_tags: The profile tags dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The profile properties dictionary. Properties are
     immutable.
    :type properties: dict[str, str]
    :param recommended_memory_in_gb: The recommended amount of memory to
     allocate in GB.
    :type recommended_memory_in_gb: float
    :param recommended_cpu: The recommended CPU allocation.
    :type recommended_cpu: float
    :param recommendation_latency_in_ms: Latency associated with the
     recommended memory/cpu config
    :type recommendation_latency_in_ms: float
    :param profile_run_result: The profile run result.
    :type profile_run_result: str
    :param error: The error details.
    :type error: ~_restclient.models.ProfileResponseError
    :param profiling_error_logs: The profiling error logs.
    :type profiling_error_logs: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'recommended_memory_in_gb': {'key': 'recommendedMemoryInGB', 'type': 'float'},
        'recommended_cpu': {'key': 'recommendedCpu', 'type': 'float'},
        'recommendation_latency_in_ms': {'key': 'recommendationLatencyInMs', 'type': 'float'},
        'profile_run_result': {'key': 'profileRunResult', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ProfileResponseError'},
        'profiling_error_logs': {'key': 'profilingErrorLogs', 'type': 'str'},
    }

    def __init__(self, name=None, description=None, image_id=None, input_data=None, state=None, created_time=None, kv_tags=None, properties=None, recommended_memory_in_gb=None, recommended_cpu=None, recommendation_latency_in_ms=None, profile_run_result=None, error=None, profiling_error_logs=None):
        super(ProfileResponse, self).__init__()
        self.name = name
        self.description = description
        self.image_id = image_id
        self.input_data = input_data
        self.state = state
        self.created_time = created_time
        self.kv_tags = kv_tags
        self.properties = properties
        self.recommended_memory_in_gb = recommended_memory_in_gb
        self.recommended_cpu = recommended_cpu
        self.recommendation_latency_in_ms = recommendation_latency_in_ms
        self.profile_run_result = profile_run_result
        self.error = error
        self.profiling_error_logs = profiling_error_logs
