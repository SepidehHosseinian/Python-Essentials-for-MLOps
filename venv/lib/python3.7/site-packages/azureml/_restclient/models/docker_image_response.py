# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .image_response_base import ImageResponseBase


class DockerImageResponse(ImageResponseBase):
    """DockerImageResponse.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ACIServiceResponseImageDetails

    :param id: The image Id.
    :type id: str
    :param name: The image name.
    :type name: str
    :param version: The image version.
    :type version: long
    :param digest: The sha256-based digest of the image
    :type digest: str
    :param description: The image description.
    :type description: str
    :param kv_tags: The image tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param properties: The image properties dictionary. Properties are
     immutable.
    :type properties: dict[str, str]
    :param created_time: The time the image was created.
    :type created_time: datetime
    :param modified_time: The time the image was last modified.
    :type modified_time: datetime
    :param auto_delete: Whether the image will be automatically deleted with
     the last service using it.
    :type auto_delete: bool
    :param image_type: The type of the image. Possible values include:
     'Docker'
    :type image_type: str or ~_restclient.models.ImageType
    :param creation_state: The state of the operation. Possible values
     include: 'NotStarted', 'Running', 'Cancelled', 'Succeeded', 'Failed',
     'TimedOut'
    :type creation_state: str or ~_restclient.models.AsyncOperationState
    :param error: The error response.
    :type error: ~_restclient.models.ImageResponseBaseError
    :param model_ids: The list of model Ids.
    :type model_ids: list[str]
    :param model_details: The list of models.
    :type model_details: list[~_restclient.models.Model]
    :param image_location: The Image location string.
    :type image_location: str
    :param image_build_log_uri: The Uri to the image build logs.
    :type image_build_log_uri: str
    :param operation_id: The ID of the asynchronous operation for this image.
    :type operation_id: str
    :param image_flavor: Constant filled by server.
    :type image_flavor: str
    :param driver_program: The name of the driver file.
    :type driver_program: str
    :param assets: The list of assets.
    :type assets: list[~_restclient.models.ImageAsset]
    :param target_runtime: The target runtime.
    :type target_runtime: ~_restclient.models.DockerImageResponseTargetRuntime
    :param docker_file_uri: The Uri to the docker file.
    :type docker_file_uri: str
    :param generated_docker_file_uri: The Uri to the generated docker file.
    :type generated_docker_file_uri: str
    """

    _validation = {
        'image_flavor': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'auto_delete': {'key': 'autoDelete', 'type': 'bool'},
        'image_type': {'key': 'imageType', 'type': 'ImageType'},
        'creation_state': {'key': 'creationState', 'type': 'AsyncOperationState'},
        'error': {'key': 'error', 'type': 'ImageResponseBaseError'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'model_details': {'key': 'modelDetails', 'type': '[Model]'},
        'image_location': {'key': 'imageLocation', 'type': 'str'},
        'image_build_log_uri': {'key': 'imageBuildLogUri', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'image_flavor': {'key': 'imageFlavor', 'type': 'str'},
        'driver_program': {'key': 'driverProgram', 'type': 'str'},
        'assets': {'key': 'assets', 'type': '[ImageAsset]'},
        'target_runtime': {'key': 'targetRuntime', 'type': 'DockerImageResponseTargetRuntime'},
        'docker_file_uri': {'key': 'dockerFileUri', 'type': 'str'},
        'generated_docker_file_uri': {'key': 'generatedDockerFileUri', 'type': 'str'},
    }

    _subtype_map = {
        'image_flavor': {'ACIServiceResponse_imageDetails': 'ACIServiceResponseImageDetails'}
    }

    def __init__(self, id=None, name=None, version=None, digest=None, description=None, kv_tags=None, properties=None, created_time=None, modified_time=None, auto_delete=None, image_type=None, creation_state=None, error=None, model_ids=None, model_details=None, image_location=None, image_build_log_uri=None, operation_id=None, driver_program=None, assets=None, target_runtime=None, docker_file_uri=None, generated_docker_file_uri=None):
        super(DockerImageResponse, self).__init__(id=id, name=name, version=version, digest=digest, description=description, kv_tags=kv_tags, properties=properties, created_time=created_time, modified_time=modified_time, auto_delete=auto_delete, image_type=image_type, creation_state=creation_state, error=error, model_ids=model_ids, model_details=model_details, image_location=image_location, image_build_log_uri=image_build_log_uri, operation_id=operation_id)
        self.driver_program = driver_program
        self.assets = assets
        self.target_runtime = target_runtime
        self.docker_file_uri = docker_file_uri
        self.generated_docker_file_uri = generated_docker_file_uri
        self.image_flavor = 'WEBAPICONTAINER'
