# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class DataStoreType(Enum):

    azure_blob = "AzureBlob"
    azure_file = "AzureFile"
    gluster_fs = "GlusterFs"
    azure_data_lake = "AzureDataLake"
    azure_my_sql = "AzureMySql"
    azure_sql_database = "AzureSqlDatabase"
    azure_postgre_sql = "AzurePostgreSql"
    dbfs = "DBFS"
    azure_data_lake_gen2 = "AzureDataLakeGen2"
    hdfs = "Hdfs"
    custom = "Custom"


class AzureStorageCredentialTypes(Enum):

    none = "None"
    sas = "Sas"
    account_key = "AccountKey"
    client_credentials = "ClientCredentials"


class ServiceDataAccessAuthIdentity(Enum):

    none = "None"
    workspace_system_assigned_identity = "WorkspaceSystemAssignedIdentity"
    workspace_user_assigned_identity = "WorkspaceUserAssignedIdentity"


class SqlCredentialTypes(Enum):

    sql_authentication = "SqlAuthentication"
    service_principal = "ServicePrincipal"
    none = "None"


class HdfsCredentialType(Enum):

    kerberos_keytab = "KerberosKeytab"
    kerberos_password = "KerberosPassword"


class Framework(Enum):

    python = "Python"
    py_spark = "PySpark"
    cntk = "Cntk"
    tensor_flow = "TensorFlow"
    py_torch = "PyTorch"


class Communicator(Enum):

    none = "None"
    parameter_server = "ParameterServer"
    gloo = "Gloo"
    mpi = "Mpi"
    nccl = "Nccl"
    parallel_task = "ParallelTask"


class DataStoreMode(Enum):

    mount = "Mount"
    download = "Download"
    upload = "Upload"


class DeliveryMechanism(Enum):

    direct = "Direct"
    mount = "Mount"
    download = "Download"
    hdfs = "Hdfs"


class OutputMechanism(Enum):

    upload = "Upload"
    mount = "Mount"
    hdfs = "Hdfs"
    link = "Link"


class IdentityType(Enum):

    managed = "Managed"
    service_principal = "ServicePrincipal"
    aml_token = "AMLToken"


class YarnDeployMode(Enum):

    none = "None"
    client = "Client"
    cluster = "Cluster"


class SuccessfulCommandReturnCode(Enum):

    zero = "Zero"
    zero_or_greater = "ZeroOrGreater"


class ApplicationEndpointType(Enum):

    jupyter = "Jupyter"
    jupyter_lab = "JupyterLab"
    ssh = "SSH"
    tensor_board = "TensorBoard"
    vs_code = "VSCode"
    theia = "Theia"
    grafana = "Grafana"
    custom = "Custom"


class TrainingType(Enum):

    train_full = "TrainFull"
    train_and_validate = "TrainAndValidate"
    cross_validate = "CrossValidate"
    mean_cross_validate = "MeanCrossValidate"


class AcquisitionFunction(Enum):

    ei = "EI"
    pi = "PI"
    ucb = "UCB"


class OptimizationMetric(Enum):

    auc_weighted = "AUC_weighted"
    accuracy = "accuracy"
    norm_macro_recall = "norm_macro_recall"
    average_precision_score_weighted = "average_precision_score_weighted"
    precision_score_weighted = "precision_score_weighted"
    spearman_correlation = "spearman_correlation"
    normalized_root_mean_squared_error = "normalized_root_mean_squared_error"
    r2_score = "r2_score"
    normalized_mean_absolute_error = "normalized_mean_absolute_error"
    normalized_root_mean_squared_log_error = "normalized_root_mean_squared_log_error"
    mean_average_precision = "mean_average_precision"
    iou = "iou"


class DatasetConsumptionType(Enum):

    run_input = "RunInput"
    reference = "Reference"


class DatasetDeliveryMechanism(Enum):

    direct = "Direct"
    mount = "Mount"
    download = "Download"
    hdfs = "Hdfs"


class DatasetOutputType(Enum):

    run_output = "RunOutput"
    reference = "Reference"


class DatasetOutputMechanism(Enum):

    upload = "Upload"
    mount = "Mount"
    link = "Link"


class CreatedFromType(Enum):

    notebook = "Notebook"


class CreatedFromLocationType(Enum):

    artifact_id = "ArtifactId"


class DynamicWhitelistStrategy(Enum):

    preselected = "Preselected"
    auto = "Auto"
    disabled = "Disabled"


class DynamicWhitelistInterleaveMethod(Enum):

    uniform = "Uniform"
    first = "First"
    last = "Last"


class TaskType(Enum):

    classification = "classification"
    regression = "regression"
    forecasting = "forecasting"


class FeaturizationMode(Enum):

    off = "Off"
    auto = "Auto"
    custom = "Custom"


class TargetLagsMode(Enum):

    off = "Off"
    auto = "Auto"
    custom = "Custom"


class OrderString(Enum):

    created_at_desc = "CreatedAtDesc"
    created_at_asc = "CreatedAtAsc"
    updated_at_desc = "UpdatedAtDesc"
    updated_at_asc = "UpdatedAtAsc"


class AsyncOperationState(Enum):

    not_started = "NotStarted"
    running = "Running"
    cancelled = "Cancelled"
    succeeded = "Succeeded"
    failed = "Failed"
    timed_out = "TimedOut"


class WebServiceState(Enum):

    transitioning = "Transitioning"
    healthy = "Healthy"
    unhealthy = "Unhealthy"
    failed = "Failed"
    unschedulable = "Unschedulable"


class DeploymentType(Enum):

    grpc_realtime_endpoint = "GRPCRealtimeEndpoint"
    http_realtime_endpoint = "HttpRealtimeEndpoint"
    batch = "Batch"


class DeployedApiFlavor(Enum):

    azure_ml_app = "AzureMlApp"
    functions_app = "FunctionsApp"


class ArchitectureType(Enum):

    amd64 = "Amd64"
    arm32v7 = "Arm32v7"


class OSType(Enum):

    linux = "Linux"
    windows = "Windows"


class RuntimeType(Enum):

    spark_python = "SparkPython"
    python = "Python"
    python_slim = "PythonSlim"
    python_custom = "PythonCustom"


class ImageType(Enum):

    docker = "Docker"


class VariantType(Enum):

    control = "Control"
    treatment = "Treatment"


class ProvisioningState(Enum):

    unknown = "Unknown"
    updating = "Updating"
    creating = "Creating"
    deleting = "Deleting"
    succeeded = "Succeeded"
    failed = "Failed"
    canceled = "Canceled"


class EncryptionStatus(Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class PrivateEndpointServiceConnectionStatus(Enum):

    pending = "Pending"
    approved = "Approved"
    rejected = "Rejected"
    disconnected = "Disconnected"
    timeout = "Timeout"


class PrivateEndpointConnectionProvisioningState(Enum):

    succeeded = "Succeeded"
    creating = "Creating"
    deleting = "Deleting"
    failed = "Failed"


class ResourceIdentityType(Enum):

    system_assigned = "SystemAssigned"
    user_assigned = "UserAssigned"
    system_assigned_user_assigned = "SystemAssigned,UserAssigned"
    none = "None"


class UsageUnit(Enum):

    count = "Count"


class QuotaUnit(Enum):

    count = "Count"


class Status(Enum):

    undefined = "Undefined"
    success = "Success"
    failure = "Failure"
    invalid_quota_below_cluster_minimum = "InvalidQuotaBelowClusterMinimum"
    invalid_quota_exceeds_subscription_limit = "InvalidQuotaExceedsSubscriptionLimit"
    invalid_vm_family_name = "InvalidVMFamilyName"
    operation_not_supported_for_sku = "OperationNotSupportedForSku"
    operation_not_enabled_for_region = "OperationNotEnabledForRegion"


class VmPriority(Enum):

    dedicated = "Dedicated"
    low_priority = "LowPriority"


class RemoteLoginPortPublicAccess(Enum):

    enabled = "Enabled"
    disabled = "Disabled"
    not_specified = "NotSpecified"


class AllocationState(Enum):

    steady = "Steady"
    resizing = "Resizing"


class ApplicationSharingPolicy(Enum):

    personal = "Personal"
    shared = "Shared"


class SshPublicAccess(Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class ComputeInstanceState(Enum):

    creating = "Creating"
    create_failed = "CreateFailed"
    deleting = "Deleting"
    running = "Running"
    restarting = "Restarting"
    restart_failed = "RestartFailed"
    job_running = "JobRunning"
    setting_up = "SettingUp"
    starting = "Starting"
    start_failed = "StartFailed"
    stop_failed = "StopFailed"
    stopped = "Stopped"
    stopping = "Stopping"
    user_setting_up = "UserSettingUp"
    unknown = "Unknown"
    unusable = "Unusable"


class NodeState(Enum):

    idle = "idle"
    running = "running"
    preparing = "preparing"
    unusable = "unusable"
    leaving = "leaving"
    preempted = "preempted"


class ComputeType(Enum):

    aks = "AKS"
    aml_compute = "AmlCompute"
    compute_instance = "ComputeInstance"
    data_factory = "DataFactory"
    virtual_machine = "VirtualMachine"
    hd_insight = "HDInsight"
    databricks = "Databricks"
    data_lake_analytics = "DataLakeAnalytics"


class DiagnoseResultLevel(Enum):

    warning = "Warning"
    error = "Error"


class ReasonCode(Enum):

    not_specified = "NotSpecified"
    not_available_for_region = "NotAvailableForRegion"
    not_available_for_subscription = "NotAvailableForSubscription"


class LinkedServiceLinkType(Enum):

    synapse = "Synapse"


class ExpirationPolicy(Enum):

    last_access_time = "LastAccessTime"
    creation_time = "CreationTime"


class SingularitySlaTier(Enum):

    basic = "Basic"
    standard = "Standard"
    premium = "Premium"


class SingularityPriority(Enum):

    low = "Low"
    medium = "Medium"
    high = "High"


class CacheStatus(Enum):

    waiting_hydrate = "WaitingHydrate"
    hydrating = "Hydrating"
    hydrating_success = "HydratingSuccess"
    in_read = "InRead"
    expired = "Expired"
    evicting = "Evicting"
    data_incomplete = "DataIncomplete"


class ComputeTargetType(Enum):

    virtual_machine = "VirtualMachine"
    hd_insight = "HDInsight"
    batch_ai = "BatchAI"
    aml_compute = "AmlCompute"
    compute_instance = "ComputeInstance"
    aisc = "Aisc"
    synapse_spark = "SynapseSpark"
    cmk8s = "Cmk8s"
    kubernetes = "Kubernetes"


class UnderlyingResourceAction(Enum):

    delete = "Delete"
    detach = "Detach"
