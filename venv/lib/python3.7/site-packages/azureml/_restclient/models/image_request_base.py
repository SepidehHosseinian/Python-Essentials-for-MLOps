# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ImageRequestBase(Model):
    """Request to create an Azure Machine Learning Image.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DockerImageRequest

    :param name:
    :type name: str
    :param description:
    :type description: str
    :param driver_program:
    :type driver_program: str
    :param image_type:
    :type image_type: str
    :param image_flavor:
    :type image_flavor: str
    :param model_ids:
    :type model_ids: list[str]
    :param tags:
    :type tags: list[str]
    :param assets:
    :type assets: list[~_restclient.models.ImageAsset]
    :param target_runtime:
    :type target_runtime: ~_restclient.models.TargetRuntime
    :param kv_tags: Service tag dictionary
    :type kv_tags: dict[str, str]
    :param properties: Service property dictionary
    :type properties: dict[str, str]
    :param image_request_type_discriminator: Constant filled by server.
    :type image_request_type_discriminator: str
    """

    _validation = {
        'name': {'required': True},
        'driver_program': {'required': True},
        'target_runtime': {'required': True},
        'image_request_type_discriminator': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'driver_program': {'key': 'driverProgram', 'type': 'str'},
        'image_type': {'key': 'imageType', 'type': 'str'},
        'image_flavor': {'key': 'imageFlavor', 'type': 'str'},
        'model_ids': {'key': 'modelIds', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'assets': {'key': 'assets', 'type': '[ImageAsset]'},
        'target_runtime': {'key': 'targetRuntime', 'type': 'TargetRuntime'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'image_request_type_discriminator': {'key': 'imageRequestTypeDiscriminator', 'type': 'str'},
    }

    _subtype_map = {
        'image_request_type_discriminator': {'DockerImageRequest': 'DockerImageRequest'}
    }

    def __init__(self, name, driver_program, target_runtime, description=None, image_type=None, image_flavor=None, model_ids=None, tags=None, assets=None, kv_tags=None, properties=None):
        super(ImageRequestBase, self).__init__()
        self.name = name
        self.description = description
        self.driver_program = driver_program
        self.image_type = image_type
        self.image_flavor = image_flavor
        self.model_ids = model_ids
        self.tags = tags
        self.assets = assets
        self.target_runtime = target_runtime
        self.kv_tags = kv_tags
        self.properties = properties
        self.image_request_type_discriminator = None
