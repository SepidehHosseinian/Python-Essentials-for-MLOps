# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AISuperComputerConfiguration(Model):
    """A class to manage AI Super Computer Configuration.

    :param instance_type: The class of compute to be used. The list of
     instance types is available in
     https://aiscaasdocs.azurewebsites.net/docs/instanceseries.md
    :type instance_type: str
    :param image_version: The image to use in AISC.  Currently only a limited
     set of predefined images are supported.
    :type image_version: str
    :param location: The location (region) where the job will run. The
     workspace region is used if not specified.
    :type location: str
    :param ai_super_computer_storage_data: All of the AI SuperComputer storage
     data sources to be made available to the run based on the configuraitons.
    :type ai_super_computer_storage_data: dict[str,
     ~_restclient.models.AISuperComputerStorageReferenceConfiguration]
    :param interactive: Specifies whether the job should be interactive.
     Interactive jobs will start the requested nodes, but not run a command.
    :type interactive: bool
    :param scale_policy: The elasticity options for a job. By leveraging
     elastic training,
     the job will automatically scale up when there is extra capacity
     available,
     and automatically scale down when resources are gradually called back.
    :type scale_policy: ~_restclient.models.AISuperComputerScalePolicy
    :param virtual_cluster_arm_id: The ARM Resource Id for the Virtual Cluster
     to submit the job to.
    :type virtual_cluster_arm_id: str
    :param tensorboard_log_directory: The directory where the Tensorboard logs
     will be written.
    :type tensorboard_log_directory: str
    :param ssh_public_key: The SSH Public Key to use when enabling SSH access
     to the job. If not specified, username/password auth will be enabled.
    :type ssh_public_key: str
    """

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'image_version': {'key': 'imageVersion', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'ai_super_computer_storage_data': {'key': 'aiSuperComputerStorageData', 'type': '{AISuperComputerStorageReferenceConfiguration}'},
        'interactive': {'key': 'interactive', 'type': 'bool'},
        'scale_policy': {'key': 'scalePolicy', 'type': 'AISuperComputerScalePolicy'},
        'virtual_cluster_arm_id': {'key': 'virtualClusterArmId', 'type': 'str'},
        'tensorboard_log_directory': {'key': 'tensorboardLogDirectory', 'type': 'str'},
        'ssh_public_key': {'key': 'sshPublicKey', 'type': 'str'},
    }

    def __init__(self, instance_type=None, image_version=None, location=None, ai_super_computer_storage_data=None, interactive=None, scale_policy=None, virtual_cluster_arm_id=None, tensorboard_log_directory=None, ssh_public_key=None):
        super(AISuperComputerConfiguration, self).__init__()
        self.instance_type = instance_type
        self.image_version = image_version
        self.location = location
        self.ai_super_computer_storage_data = ai_super_computer_storage_data
        self.interactive = interactive
        self.scale_policy = scale_policy
        self.virtual_cluster_arm_id = virtual_cluster_arm_id
        self.tensorboard_log_directory = tensorboard_log_directory
        self.ssh_public_key = ssh_public_key
