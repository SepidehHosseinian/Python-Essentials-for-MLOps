# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class AssetsOperations(object):
    """AssetsOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def create(
            self, subscription_id, resource_group, workspace, body, custom_headers=None, raw=False, **operation_config):
        """Create an Asset.

        Create an Asset from the provided payload.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the
         workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param body: The Asset to be created.
        :type body: ~_restclient.models.Asset
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Asset or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.Asset or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ModelErrorResponseException<_restclient.models.ModelErrorResponseException>`
        """
        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body, 'Asset')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ModelErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Asset', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets'}

    def list_query(
            self, subscription_id, resource_group, workspace, run_id=None, name=None, tag=None, count=None, skip_token=None, tags=None, properties=None, type=None, orderby="CreatedAtDesc", custom_headers=None, raw=False, **operation_config):
        """Query the list of Assets in a workspace.

        If no filter is passed, the query lists all the Assets in the given
        workspace. The returned list is paginated and the count of items in
        each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the
         workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param run_id: The run Id associated with the Assets.
        :type run_id: str
        :param name: The object name.
        :type name: str
        :param tag: The object tag.
        :type tag: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param tags: A set of tags with which to filter the returned models.
         It is a comma separated string of tags key or tags key=value
         Example: tagKey1,tagKey2,tagKey3=value3 .
        :type tags: str
        :param properties: A set of properties with which to filter the
         returned models.
         It is a comma separated string of properties key and/or properties
         key=value
         Example: propKey1,propKey2,propKey3=value3 .
        :type properties: str
        :param type: The object type.
        :type type: str
        :param orderby: An option for specifying how to order the list.
         Possible values include: 'CreatedAtDesc', 'CreatedAtAsc',
         'UpdatedAtDesc', 'UpdatedAtAsc'
        :type orderby: str or ~_restclient.models.OrderString
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaginatedAssetList or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.PaginatedAssetList or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ModelErrorResponseException<_restclient.models.ModelErrorResponseException>`
        """
        # Construct URL
        url = self.list_query.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if run_id is not None:
            query_parameters['runId'] = self._serialize.query("run_id", run_id, 'str')
        if name is not None:
            query_parameters['name'] = self._serialize.query("name", name, 'str')
        if tag is not None:
            query_parameters['tag'] = self._serialize.query("tag", tag, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query("count", count, 'int')
        if skip_token is not None:
            query_parameters['$skipToken'] = self._serialize.query("skip_token", skip_token, 'str')
        if tags is not None:
            query_parameters['tags'] = self._serialize.query("tags", tags, 'str')
        if properties is not None:
            query_parameters['properties'] = self._serialize.query("properties", properties, 'str')
        if type is not None:
            query_parameters['type'] = self._serialize.query("type", type, 'str')
        if orderby is not None:
            query_parameters['orderby'] = self._serialize.query("orderby", orderby, 'OrderString')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ModelErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaginatedAssetList', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_query.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets'}

    def patch(
            self, subscription_id, resource_group, workspace, id, body, custom_headers=None, raw=False, **operation_config):
        """Update an Asset.

        Patch a specific Asset.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the
         workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param id: The Id of the Asset to patch.
        :type id: str
        :param body: The payload that is used to patch an Asset.
        :type body: list[~_restclient.models.JsonPatchOperation]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Asset or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.Asset or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ModelErrorResponseException<_restclient.models.ModelErrorResponseException>`
        """
        # Construct URL
        url = self.patch.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body, '[JsonPatchOperation]')

        # Construct and send request
        request = self._client.patch(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ModelErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Asset', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}'}

    def delete(
            self, subscription_id, resource_group, workspace, id, custom_headers=None, raw=False, **operation_config):
        """Delete an Asset.

        Delete the specified Asset.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the
         workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param id: The Id of the Asset to delete.
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ModelErrorResponseException<_restclient.models.ModelErrorResponseException>`
        """
        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 204]:
            raise models.ModelErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}'}

    def query_by_id(
            self, subscription_id, resource_group, workspace, id, custom_headers=None, raw=False, **operation_config):
        """Get an Asset.

        Get an Asset by Id.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the
         workspace is located.
        :type resource_group: str
        :param workspace: The name of the workspace.
        :type workspace: str
        :param id: The Asset Id.
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Asset or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.Asset or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ModelErrorResponseException<_restclient.models.ModelErrorResponseException>`
        """
        # Construct URL
        url = self.query_by_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroup': self._serialize.url("resource_group", resource_group, 'str'),
            'workspace': self._serialize.url("workspace", workspace, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ModelErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Asset', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    query_by_id.metadata = {'url': '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}'}
