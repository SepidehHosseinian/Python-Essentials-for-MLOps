# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from .operations.artifact_operations import ArtifactOperations
from .operations.credential_operations import CredentialOperations
from .operations.data_stores_operations import DataStoresOperations
from .operations.dataset_operations import DatasetOperations
from .operations.jasmine_operations import JasmineOperations
from .operations.metric_operations import MetricOperations
from .operations.assets_operations import AssetsOperations
from .operations.ml_models_operations import MLModelsOperations
from .operations.operations import Operations
from .operations.profiles_operations import ProfilesOperations
from .operations.services_operations import ServicesOperations
from .operations.events_operations import EventsOperations
from .operations.experiment_operations import ExperimentOperations
from .operations.run_operations import RunOperations
from .operations.run_metric_operations import RunMetricOperations
from .operations.run_artifact_operations import RunArtifactOperations
from .operations.snapshot_operations import SnapshotOperations
from .operations.workspaces_operations import WorkspacesOperations
from .operations.workspace_features_operations import WorkspaceFeaturesOperations
from .operations.notebooks_operations import NotebooksOperations
from .operations.usages_operations import UsagesOperations
from .operations.virtual_machine_sizes_operations import VirtualMachineSizesOperations
from .operations.quotas_operations import QuotasOperations
from .operations.workspace_connections_operations import WorkspaceConnectionsOperations
from .operations.arm_template_operations import ArmTemplateOperations
from .operations.machine_learning_compute_operations import MachineLearningComputeOperations
from .operations.private_endpoint_connections_operations import PrivateEndpointConnectionsOperations
from .operations.private_link_resources_operations import PrivateLinkResourcesOperations
from .operations.linked_services_operations import LinkedServicesOperations
from .operations.datacache_operations import DatacacheOperations
from .operations.datacache_stores_operations import DatacacheStoresOperations
from . import models


class RestClientConfiguration(Configuration):
    """Configuration for RestClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://management.azure.com'

        super(RestClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azureml._restclient/{}'.format(VERSION))

        self.credentials = credentials


class RestClient(object):
    """RestClient

    :ivar config: Configuration for client.
    :vartype config: RestClientConfiguration

    :ivar artifact: Artifact operations
    :vartype artifact: _restclient.operations.ArtifactOperations
    :ivar credential: Credential operations
    :vartype credential: _restclient.operations.CredentialOperations
    :ivar data_stores: DataStores operations
    :vartype data_stores: _restclient.operations.DataStoresOperations
    :ivar dataset: Dataset operations
    :vartype dataset: _restclient.operations.DatasetOperations
    :ivar jasmine: Jasmine operations
    :vartype jasmine: _restclient.operations.JasmineOperations
    :ivar metric: Metric operations
    :vartype metric: _restclient.operations.MetricOperations
    :ivar assets: Assets operations
    :vartype assets: _restclient.operations.AssetsOperations
    :ivar ml_models: MLModels operations
    :vartype ml_models: _restclient.operations.MLModelsOperations
    :ivar operations: Operations operations
    :vartype operations: _restclient.operations.Operations
    :ivar profiles: Profiles operations
    :vartype profiles: _restclient.operations.ProfilesOperations
    :ivar services: Services operations
    :vartype services: _restclient.operations.ServicesOperations
    :ivar events: Events operations
    :vartype events: _restclient.operations.EventsOperations
    :ivar experiment: Experiment operations
    :vartype experiment: _restclient.operations.ExperimentOperations
    :ivar run: Run operations
    :vartype run: _restclient.operations.RunOperations
    :ivar run_metric: RunMetric operations
    :vartype run_metric: _restclient.operations.RunMetricOperations
    :ivar run_artifact: RunArtifact operations
    :vartype run_artifact: _restclient.operations.RunArtifactOperations
    :ivar snapshot: Snapshot operations
    :vartype snapshot: _restclient.operations.SnapshotOperations
    :ivar workspaces: Workspaces operations
    :vartype workspaces: _restclient.operations.WorkspacesOperations
    :ivar workspace_features: WorkspaceFeatures operations
    :vartype workspace_features: _restclient.operations.WorkspaceFeaturesOperations
    :ivar notebooks: Notebooks operations
    :vartype notebooks: _restclient.operations.NotebooksOperations
    :ivar usages: Usages operations
    :vartype usages: _restclient.operations.UsagesOperations
    :ivar virtual_machine_sizes: VirtualMachineSizes operations
    :vartype virtual_machine_sizes: _restclient.operations.VirtualMachineSizesOperations
    :ivar quotas: Quotas operations
    :vartype quotas: _restclient.operations.QuotasOperations
    :ivar workspace_connections: WorkspaceConnections operations
    :vartype workspace_connections: _restclient.operations.WorkspaceConnectionsOperations
    :ivar arm_template: ArmTemplate operations
    :vartype arm_template: _restclient.operations.ArmTemplateOperations
    :ivar machine_learning_compute: MachineLearningCompute operations
    :vartype machine_learning_compute: _restclient.operations.MachineLearningComputeOperations
    :ivar private_endpoint_connections: PrivateEndpointConnections operations
    :vartype private_endpoint_connections: _restclient.operations.PrivateEndpointConnectionsOperations
    :ivar private_link_resources: PrivateLinkResources operations
    :vartype private_link_resources: _restclient.operations.PrivateLinkResourcesOperations
    :ivar linked_services: LinkedServices operations
    :vartype linked_services: _restclient.operations.LinkedServicesOperations
    :ivar datacache: Datacache operations
    :vartype datacache: _restclient.operations.DatacacheOperations
    :ivar datacache_stores: DatacacheStores operations
    :vartype datacache_stores: _restclient.operations.DatacacheStoresOperations

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = RestClientConfiguration(credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.artifact = ArtifactOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.credential = CredentialOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.data_stores = DataStoresOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.dataset = DatasetOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.jasmine = JasmineOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.metric = MetricOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.assets = AssetsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.ml_models = MLModelsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self.config, self._serialize, self._deserialize)
        self.profiles = ProfilesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.services = ServicesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.events = EventsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.experiment = ExperimentOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.run = RunOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.run_metric = RunMetricOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.run_artifact = RunArtifactOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.snapshot = SnapshotOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.workspaces = WorkspacesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.workspace_features = WorkspaceFeaturesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.notebooks = NotebooksOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.usages = UsagesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.virtual_machine_sizes = VirtualMachineSizesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.quotas = QuotasOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.workspace_connections = WorkspaceConnectionsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.arm_template = ArmTemplateOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.machine_learning_compute = MachineLearningComputeOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.private_endpoint_connections = PrivateEndpointConnectionsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.private_link_resources = PrivateLinkResourcesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.linked_services = LinkedServicesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.datacache = DatacacheOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.datacache_stores = DatacacheStoresOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def list_skus(
            self, subscription_id, custom_headers=None, raw=False, **operation_config):
        """Lists all skus with associated features.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SkuListResult or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.SkuListResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        api_version = "2020-06-01"

        # Construct URL
        url = self.list_skus.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.MachineLearningServiceErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SkuListResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_skus.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/workspaces/skus'}
