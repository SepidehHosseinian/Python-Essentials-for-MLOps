# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class LinkedServicesOperations(object):
    """LinkedServicesOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: Version of Azure Machine Learning resource provider API.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config
        self.api_version = "2020-04-01-preview"

    def list(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """List all linked services under an AML workspace.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: Name of the resource group in which the
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LinkedServiceList or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.LinkedServiceList or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "subscription_id",
                subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('LinkedServiceList', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list.metadata = {
        'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/'
        'providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices'}

    def create(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            link_name,
            parameters,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Add a new linked service.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: Name of the resource group in which the
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace
        :type link_name: str
        :param parameters: The object for creating or updating a linked
         service
        :type parameters: ~_restclient.models.LinkedServiceRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LinkedServiceResponse or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.LinkedServiceResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "subscription_id",
                subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str'),
            'linkName': self._serialize.url(
                "link_name",
                link_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(parameters, 'LinkedServiceRequest')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            body_content,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('LinkedServiceResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create.metadata = {
        'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/'
        'providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}'}

    def get(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            link_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Get the detail of a linked service.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: Name of the resource group in which the
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace
        :type link_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LinkedServiceResponse or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.LinkedServiceResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "subscription_id",
                subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str'),
            'linkName': self._serialize.url(
                "link_name",
                link_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('LinkedServiceResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {
        'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/'
        'providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}'}

    def delete(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            link_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Delete a linked service.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: Name of the resource group in which the
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace
        :type link_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "subscription_id",
                subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str'),
            'linkName': self._serialize.url(
                "link_name",
                link_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 204]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete.metadata = {
        'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/'
        'providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}'}
