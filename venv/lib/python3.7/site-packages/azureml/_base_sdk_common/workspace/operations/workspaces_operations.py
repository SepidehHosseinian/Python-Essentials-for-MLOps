# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
import json
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import DeserializationError
from msrestazure.azure_exceptions import CloudError
from msrestazure.azure_operation import AzureOperationPoller
from azureml._base_sdk_common import __version__ as SDK_VERSION
from .. import models

#  TODO This file should be autogenerated
_PE_PROPERTY_PROVISIONING_STATE = "provisioning_state"
_PE_PROPERTY_SUBNET_ID = "subnet_id"


class WorkspacesOperations(object):
    """WorkspacesOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: Version of Azure Machine Learning resource provider API. Constant value: "2020-01-01".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config
        self.api_version = "2020-01-01"
        self.resynckeys_lro_min_api_version = "2021-04-01"

    def get(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            is_dataplane=False,
            **operation_config):
        """Gets the properties of the specified machine learning workspace.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Workspace or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.Workspace or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.get.metadata['url']
        if is_dataplane:
            url = self.get.metadata['dataplane-url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", "2022-05-01", 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseWrapperException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Workspace', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                    + '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}',
                    'dataplane-url': '/rp/workspaces/subscriptions/{subscriptionId}/resourceGroups/'
                    + '{resourceGroupName}/providers/Microsoft.MachineLearningServices/'
                    + 'workspaces/{workspaceName}'}

    def create_or_update(
            self,
            resource_group_name,
            workspace_name,
            parameters,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Creates or updates a workspace with the specified parameters.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param parameters: The parameters for creating or updating a machine
         learning workspace.
        :type parameters: ~machinelearningservicesswagger.models.Workspace
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Workspace or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.Workspace or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.create_or_update.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(parameters, 'Workspace')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            body_content,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 201]:
            print(response.text)
            return None

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Workspace', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Workspace', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                                 + '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def _delete_initial(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Deletes a machine learning workspace.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header(
                "self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 202, 204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def delete(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Deletes a Workspace.

        :param resource_group_name: Name of the resource group to which the
         resource belongs.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Workspace names can
         only contain a combination of alphanumeric characters along with dash
         (-) and underscore (_). The name must be from 1 through 64 characters
         long.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :return: An instance of AzureOperationPoller that returns None or
         ClientRawResponse if raw=true
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        raw_result = self._delete_initial(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        # Construct and send request
        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202, 204]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = ClientRawResponse(None, response)
                return client_raw_response

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                       + '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def _sync_keys_initial(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        url = self.sync_keys.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.resynckeys_lro_min_api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header(
                "self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 202, 204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            raw_result = ClientRawResponse(None, response)
            return raw_result

    def sync_keys(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Sync keys for a machine learning workspace.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        raw_result = self._sync_keys_initial(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202, 204]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = ClientRawResponse(None, response)
                return client_raw_response

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)
    sync_keys.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                          + '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/resynckeys'}

    def _update_initial(
            self,
            resource_group_name,
            workspace_name,
            body_content,
            custom_headers=None,
            raw=False,
            **operation_config):
        url = self.update.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", "2022-05-01", 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header(
                "self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.patch(url, query_parameters)

        response = self._client.send(
            request,
            header_parameters,
            body_content,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 202, 204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            raw_result = ClientRawResponse(None, response)
            return raw_result

    def update(
            self,
            resource_group_name,
            workspace_name,
            parameters,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Updates a machine learning workspace with the specified parameters.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param parameters: The parameters for updating a machine learning
         workspace.
        :type parameters:
         ~machinelearningservicesswagger.models.WorkspaceUpdateParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Workspace or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.Workspace or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct body
        body_content = self._serialize.body(parameters, 'WorkspaceUpdateParameters')

        # Construct URL
        raw_result = self._update_initial(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            body_content=body_content,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        # Construct and send request
        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202, 204]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            if raw:
                client_raw_response = ClientRawResponse(None, response)
                return client_raw_response

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)

    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                       + '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def list_by_resource_group(
            self,
            resource_group_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Lists all the available machine learning workspaces under the specified
        resource group.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: WorkspaceListResult or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.WorkspaceListResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.list_by_resource_group.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')
        if self.config.skiptoken is not None:
            query_parameters['$skiptoken'] = self._serialize.query(
                "self.config.skiptoken", self.config.skiptoken, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseWrapperException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('WorkspaceListResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_by_resource_group.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
                                       + '/providers/Microsoft.MachineLearningServices/workspaces'}

    def list(
            self, custom_headers=None, raw=False, **operation_config):
        """Lists all the available machine learning workspaces under the specified
        subscription.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: WorkspaceListResult or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.WorkspaceListResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')
        if self.config.skiptoken is not None:
            query_parameters['$skiptoken'] = self._serialize.query(
                "self.config.skiptoken", self.config.skiptoken, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseWrapperException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('WorkspaceListResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list.metadata = {
        'url': '/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/workspaces'}

    def get_private_endpoint_connection(
            self,
            private_endpoint_id,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Get details of Private EndPoint.

        :param str private_endpoint_id: The resource ID of the private endpoint used in private
            endpoint connection in Azure ML workspace.
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: Workspace or ClientRawResponse if raw=true
        :rtype: dict or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.delete_private_endpoint_connection.metadata['url']
        path_format_arguments = {
            'peResourceId': self._serialize.url(
                "peResourceId", private_endpoint_id, 'str')}
        url = self._client.format_url(url, **path_format_arguments)
        # Construct parameters
        query_parameters = {}
        # This is a call to Microsoft/network. Using a different API version
        # for this call.
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", '2020-04-01', 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseWrapperException(
                self._deserialize, response)

        response_dict = {}

        if response.status_code == 200:
            content = response.content
            if isinstance(content, bytes):
                content = content.decode('utf-8')
            response_content = json.loads(content)
            if "properties" in response_content:
                response_dict[_PE_PROPERTY_PROVISIONING_STATE] = response_content["properties"]["provisioningState"] \
                    if "provisioningState" in response_content["properties"] else None
                if "subnet" in response_content["properties"]:
                    response_dict[_PE_PROPERTY_SUBNET_ID] = response_content["properties"]["subnet"]["id"] \
                        if "id" in response_content["properties"]["subnet"] else None

        if raw:
            client_raw_response = ClientRawResponse(response_dict, response)
            return client_raw_response

        return response_dict
    get_private_endpoint_connection.metadata = {'url': '{peResourceId}'}

    def delete_private_endpoint_connection(
            self,
            private_endpoint_connection_id,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Deletes specified Private EndPoint Connection details of the given Azure ML workspace.

        :param str private_endpoint_connection_id: The resource ID of the private end point connection in the
            Azure ML workspace.
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.
        :return: Workspace or ClientRawResponse if raw=true
        :rtype: ~machinelearningservicesswagger.models.PrivateEndPointConnections or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseWrapperException<machinelearningservicesswagger.models.ErrorResponseWrapperException>`
        """
        # Construct URL
        url = self.delete_private_endpoint_connection.metadata['url']
        path_format_arguments = {
            'peResourceId': self._serialize.url(
                "peResourceId",
                private_endpoint_connection_id,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)
        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        header_parameters['x-ms-client-amlsdk'] = SDK_VERSION
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseWrapperException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize(
                'PrivateEndPointConnections', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_private_endpoint_connection.metadata = {'url': '{peResourceId}'}

    def list_keys(
            self,
            resource_group_name,
            workspace_name,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Lists all the keys associated with this workspace. This includes keys
        for the storage account, app insights and password for container
        registry.

        :param resource_group_name: Name of the resource group in which
         workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ListWorkspaceKeysResult or ClientRawResponse if raw=true
        :rtype: ~_restclient.models.ListWorkspaceKeysResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        # Construct URL
        url = self.list_keys.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "self.config.subscription_id",
                self.config.subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            stream=False,
            **operation_config)

        if response.status_code not in [200]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize(
                'ListWorkspaceKeysResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_keys.metadata = {
        'url': (
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers'
            '/Microsoft.MachineLearningServices/workspaces/{workspaceName}/listKeys')}

    def _diagnose_initial(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            body=None,
            custom_headers=None,
            raw=False,
            **operation_config):
        # Construct URL
        url = self.diagnose.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url(
                "subscription_id",
                subscription_id,
                'str'),
            'resourceGroupName': self._serialize.url(
                "resource_group_name",
                resource_group_name,
                'str'),
            'workspaceName': self._serialize.url(
                "workspace_name",
                workspace_name,
                'str')}
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query(
            "self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header(
                "self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(
                body, 'DiagnoseWorkspaceParameters')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request,
            header_parameters,
            body_content,
            stream=False,
            **operation_config)

        if response.status_code not in [200, 202]:
            raise models.MachineLearningServiceErrorException(
                self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize(
                'DiagnoseResponseResult', response)
            header_dict = {
                'Location': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            try:
                client_raw_response.add_headers(header_dict)
            except DeserializationError:
                pass  # Deserialization of Headers here can fail
            return client_raw_response

        return deserialized

    def diagnose(
            self,
            subscription_id,
            resource_group_name,
            workspace_name,
            body=None,
            custom_headers=None,
            raw=False,
            **operation_config):
        """Diagnose workspace setup issue.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param body: The parameter of diagnosing workspace health
        :type body: ~_restclient.models.DiagnoseWorkspaceParameters
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :return: An instance of AzureOperationPoller that returns
         DiagnoseResponseResult or ClientRawResponse if raw=true
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~_restclient.models.DiagnoseResponseResult]
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`MachineLearningServiceErrorException<_restclient.models.MachineLearningServiceErrorException>`
        """
        raw_result = self._diagnose_initial(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            body=body,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        # Construct and send request
        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202]:
                raise models.MachineLearningServiceErrorException(
                    self._deserialize, response)

            header_dict = {
                'Location': 'str',
            }
            deserialized = self._deserialize(
                'DiagnoseResponseResult', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                client_raw_response.add_headers(header_dict)
                return client_raw_response

            return deserialized

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)
    diagnose.metadata = {
        'url': (
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            '/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/diagnose')}
