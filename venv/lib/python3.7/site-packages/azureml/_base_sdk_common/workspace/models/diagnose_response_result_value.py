# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class DiagnoseResponseResultValue(Model):
    """DiagnoseResponseResultValue.

    :param user_defined_route_results:
    :type user_defined_route_results: list[~_restclient.models.DiagnoseResult]
    :param network_security_rule_results:
    :type network_security_rule_results:
     list[~_restclient.models.DiagnoseResult]
    :param resource_lock_results:
    :type resource_lock_results: list[~_restclient.models.DiagnoseResult]
    :param dns_resolution_results:
    :type dns_resolution_results: list[~_restclient.models.DiagnoseResult]
    :param storage_account_results:
    :type storage_account_results: list[~_restclient.models.DiagnoseResult]
    :param key_vault_results:
    :type key_vault_results: list[~_restclient.models.DiagnoseResult]
    :param container_registry_results:
    :type container_registry_results: list[~_restclient.models.DiagnoseResult]
    :param application_insights_results:
    :type application_insights_results:
     list[~_restclient.models.DiagnoseResult]
    :param other_results:
    :type other_results: list[~_restclient.models.DiagnoseResult]
    """

    _attribute_map = {
        'user_defined_route_results': {'key': 'userDefinedRouteResults', 'type': '[DiagnoseResult]'},
        'network_security_rule_results': {'key': 'networkSecurityRuleResults', 'type': '[DiagnoseResult]'},
        'resource_lock_results': {'key': 'resourceLockResults', 'type': '[DiagnoseResult]'},
        'dns_resolution_results': {'key': 'dnsResolutionResults', 'type': '[DiagnoseResult]'},
        'storage_account_results': {'key': 'storageAccountResults', 'type': '[DiagnoseResult]'},
        'key_vault_results': {'key': 'keyVaultResults', 'type': '[DiagnoseResult]'},
        'container_registry_results': {'key': 'containerRegistryResults', 'type': '[DiagnoseResult]'},
        'application_insights_results': {'key': 'applicationInsightsResults', 'type': '[DiagnoseResult]'},
        'other_results': {'key': 'otherResults', 'type': '[DiagnoseResult]'},
    }

    def __init__(
            self,
            user_defined_route_results=None,
            network_security_rule_results=None,
            resource_lock_results=None,
            dns_resolution_results=None,
            storage_account_results=None,
            key_vault_results=None,
            container_registry_results=None,
            application_insights_results=None,
            other_results=None):
        super(DiagnoseResponseResultValue, self).__init__()
        self.user_defined_route_results = user_defined_route_results
        self.network_security_rule_results = network_security_rule_results
        self.resource_lock_results = resource_lock_results
        self.dns_resolution_results = dns_resolution_results
        self.storage_account_results = storage_account_results
        self.key_vault_results = key_vault_results
        self.container_registry_results = container_registry_results
        self.application_insights_results = application_insights_results
        self.other_results = other_results
