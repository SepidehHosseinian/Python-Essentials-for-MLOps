# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class WorkspaceUpdateParameters(Model):
    """The parameters for updating a machine learning workspace.

    :param tags: The resource tags for the machine learning workspace.
    :type tags: dict[str, str]
    :param sku: The sku of the workspace.
    :type sku: ~_restclient.models.Sku
    :param identity: The identity of the resource.
    :type identity: ~_restclient.models.Identity
    :param description: The description of this workspace.
    :type description: str
    :param friendly_name: The friendly name for this workspace.
    :type friendly_name: str
    :param service_managed_resources_settings: The service managed resources
     settings.
    :type service_managed_resources_settings:
     ~_restclient.models.ServiceManagedResourcesSettings
    :param image_build_compute: The compute name for image build
    :type image_build_compute: str
    :param allow_public_access_when_behind_vnet: Allow public access for private link workspace.
    :type allow_public_access_when_behind_vnet: str
    :param primary_user_assigned_identity: The user assigned identity resource
     id that represents the workspace identity.
    :type primary_user_assigned_identity: str
    :param v1_legacy_mode: Prevent using v2 API service on public Azure Resource Manager
    :type v1_legacy_mode: bool
    :param container_registry: container_registry's ARM id
    :type container_registry str
    """

    _attribute_map = {
        'tags': {
            'key': 'tags',
            'type': '{str}'},
        'sku': {
            'key': 'sku',
            'type': 'Sku'},
        'identity': {
            'key': 'identity',
            'type': 'Identity'},
        'description': {
            'key': 'properties.description',
            'type': 'str'},
        'friendly_name': {
            'key': 'properties.friendlyName',
            'type': 'str'},
        'service_managed_resources_settings': {
            'key': 'properties.serviceManagedResourcesSettings',
            'type': 'ServiceManagedResourcesSettings'},
        'image_build_compute': {
            'key': 'properties.imageBuildCompute',
            'type': 'str'},
        'allow_public_access_when_behind_vnet': {
            'key': 'properties.allowPublicAccessWhenBehindVnet',
            'type': 'str'},
        'primary_user_assigned_identity': {
            'key': 'properties.primaryUserAssignedIdentity',
            'type': 'str'},
        'v1_legacy_mode': {
            'key': 'properties.v1LegacyMode',
            'type': 'str'},
        'container_registry': {
            'key': 'properties.containerRegistry',
            'type': 'str'},
    }

    def __init__(
            self,
            tags=None,
            sku=None,
            identity=None,
            description=None,
            friendly_name=None,
            service_managed_resources_settings=None,
            image_build_compute=None,
            primary_user_assigned_identity=None,
            allow_public_access_when_behind_vnet=None,
            v1_legacy_mode=None,
            container_registry=None):
        super(WorkspaceUpdateParameters, self).__init__()
        self.tags = tags
        self.sku = sku
        self.identity = identity
        self.description = description
        self.friendly_name = friendly_name
        self.service_managed_resources_settings = service_managed_resources_settings
        self.image_build_compute = image_build_compute
        self.primary_user_assigned_identity = primary_user_assigned_identity
        self.allow_public_access_when_behind_vnet = allow_public_access_when_behind_vnet
        self.v1_legacy_mode = v1_legacy_mode
        self.container_registry = container_registry
